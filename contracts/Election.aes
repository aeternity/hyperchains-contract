include "List.aes"

payable contract SimpleElection =

  type delegate = address
  type block_height = int
  type tokens = int

  /**
   * Single stake entry
   */
  record stake = {
    value     : tokens,
    created   : block_height
  }


  /**
   * Deferred withdrawal
   */
  record withdraw_request = {
    value   : itokensnt,
    created : block_height
  }


  /**
   * General variables and configurations
   */
  record config = {
    withdraw_delay : block_height,
    deposit_delay  : block_height
  }


  /**
   * Leader candidate with calculated voting power
   */
  record candidate = {
    address : delegate,
    power   : int
  }

  
  /**
   * Description of the election result on a given block
   */
  record election_result = {
    leader : delegate,
    height : block_height
  }


  record state = {
    stakes : map(delegate, list(stake)),
    withdraw_requests : map(delegate, list(withdraw_request)),
    last_election : option(election_result),
    config : config
  }


  entrypoint
    init : (block_height, block_height) => state
    init(withdraw_delay, deposit_delay) = {
      stakes = #{},
      withdraw_requests = [],
      last_election = None,
      config = {
        withdraw_delay = withdraw_delay,
        deposit_delay  = deposit_delay
      }
    }


  /**
   * Default configuration â€“ can be adjusted in the `init` entrypoint
   */
  function
    default_config : () => config
    default_config() =
      config{
        withdraw_delay = 10,
        deposit_delay  = 10
      }
  

  /**
   * Calculates the voting power of a stake entry
   */
  function
    valuate : stake => int  
    valuate(s) =
      let age = Block.height - s.created
      if(age < state.config.deposit_delay) 0
      else s.value + s.age^2


  /**
   * Constant that defines range of hashes
   */
  function
    hash_range : () => int
    hash_range() =
      Bytes.to_int(#ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff : hash)


  /**
   * Extracts list of candidates along with their voting power from the state
   */
  function
    get_candidates : () => list(candidate) 
    get_candidates() =
      let stakes = Map.to_list(state.stakes)
      let make_candidate((addr, stks)) =
        candidate{
          address = addr,
          power = List.sum([valuate(st) | st <- stks])
        }
      List.map(make_candidate, stakes)


  /**
   * Get total of staked tokens of a delegate
   */
  function
    staked_tokens : delegate => tokens 
    staked_tokens(address) =
      List.sum([s.value | s <- state.stakes[address = []]])


  /**
   * Get total number of tokens that a delegate requested to thaw
   */
  function
    requested_withdrawals : delegate => tokens 
    requested_withdrawals(address) =
      List.sum([s.value | s <- state.withdraw_requests[address = []]])


  function 
    voting_power : delegate => int
    voting_power(address) =
      let stakes =
        List.sort(
          (s1, s2) => valuate(s1) < valuate(s2),
          state.stakes[address])


  /**
   * Ordering on candidates
   */
  function 
    candidate_cmp : (candidate, candidate) => bool
    candidate_cmp(c1, c2) =
      if(c1.power == c2.power) c1.address < c2.address
      else c1.power < c2.power


  /**
   * Performs the election of the leader depending on the random hash
   */
  function
    elect_candidate : (list(candidate), hash) => option(delegate)
    elect_candidate(candidates, rand) =
      let total_power = List.sum([c.power | c <- candidates])
      let sorted = List.sort(candidate_cmp, candidates)
      let shot = total_power * Bytes.to_int(rand) / hash_range
      choose_by_power(sorted, shot)


  /**
   * Extracts the chosen leader from the delegates list
   */
  function
    choose_by_power : (list(candidate), int) => option(delegate) 
    choose_by_power(delegates, shot) =
      switch(delegates)
        []   => None
        h::t =>
          if(h.power > shot) Some(h.address)
          else choose_by_power(t, shot - h.power)


  /**
   * Freezes tokens to be counted as stake
   */
  payable stateful entrypoint
    deposit_stake : () => unit
    deposit_stake() =
      require(Call.value > 0, "Value must be positive")

      let all_stakes = state.stakes
      let caller_stakes = Mall_stakes[Call.origin = []]
      let new_caller_stakes = {value = Call.value, created = Chain.block_height}::caller_stakes}
      put(state{stakes = all_stakes{[Call.origin] = new_caller_stakes})


  /**
   * Registers withdrawal request
   */
  stateful entrypoint 
    request_withdraw : tokens => unit
    request_withdraw(amount) =
      let caller = Call.origin
      require(
        staked_tokens(caller) - requested_withdrawals(caller) >= amount,
        "Withdraw too much")

      let all_withdrawals = state.withdraw_requests
      let caller_withdrawals = all_withdrawals[caller = []]
      let new_withdrawals =
        {value = amount, created = Chain.block_height}::all_withdrawals
      put(state{withdraw_requests = new_withdrawals})


  /**
   * Filters out the premature withdrawals and calculates the value
   * of the rest
   */
  function
    extract_eligible_withdrawals : list(withdraw_request) => (tokens, list(withdraw_request)) 
    extract_eligible_withdrawals([]) = (0, [])
    extract_eligible_withdrawals(w::t) =
      let (tokens, rest) = extract_eligible_withdrawals(t)
      if(Chain.block_height - w.created > state.config.withdraw_delay)
        // We take it
        (tokens + w.value, rest)
      else
        // We leave it
        (tokens, w::rest)


  /**
   * Withdraws all eligible tokens
   */
  stateful entrypoint
    withdraw : () => tokens
    withdraw() =
      let caller = Call.origin

      let all_withdrawals = state.withdraw_requests
      let caller_withdrawals = all_withdrawals[caller = []]
      
      let (total_value, new_withdrawals) = List.foldr(
          (w, (amount, leftovers)) =>
            
          (0, []),
          caller_withdrawals)
      
      Chain.spend(total_value, caller)
      put(state{withdrawals[caller = new_withdrawals]})
      decrease_stake(caller, total_value)


  /**
   * Reduces the amount of staked tokens. Drops the least aged tokens first
   */
  stateful function
    decrease_stake : (delegate, tokens) => ()
    decrease_stake(caller, value) =
      let stakes = List.sort((s1, s2) => valuate(s1.age < s2.age, state.stakes[caller = []])
      let shrinked_stakes = run_decrease_stake(stakes, value)
      put(state{stakes[caller] = shrinked_stakes})


  function
    run_decrease_stake : (list(stake), tokens) => list(stake)
    run_decrease_stake([], 0) = []
    run_decrease_stake(h::t, amount) =
      if(h.value >= amount) h{value = h.value - amount}::t
      else run_decrease_stake(t, amount - h.value)
    run_decrease_stake([], _) = abort("Cannot decrease more stake")


  /**
   * Returns the leader of the upcoming generation without performing the election
   */
  entrypoint 
    get_computed_leader : () => option(delegate)
    get_computed_leader() =
      Option.flat_map(
        le =>
          if(Chain.block_height != le.height) None 
          else Some(le),
        state.last_election)


  /**
   * Restricted. Performs the leader election.
   */
  stateful entrypoint
    get_leader : hash => delegate
    get_leader(rand) =
      protocol_restrict()

      switch(get_computed_leader())
        Some(le) => le.address
        None => 
          let candidates = get_candidates()
          switch elect_candidate(candidates, rand)
            None => abort("No candidates eligible!")
            Some(leader) =>
              let stake = staked_tokens(leader)
              put(state{
                stakes[leader] = [{value = stake, created = Chain.block_height}],
                last_election = {leader = leader, height = Chain.block_height}
              })
              leader


  /**
   * Restricted. Vanishes the staked funds of the user in case of fraud
   */
  stateful entrypoint
    punish : delegate => ()
    punish(address) =
      protocol_restrict()
      let stake = staked_tokens(address)
      put(state{stakes[address] = [], withdraw_requests[address] = []})


  /**
   * Make the function impossible to call by a regular user
   */
  function
    protocol_restrict : () => unit
    protocol_restrict() =
      require(Call.origin == false, "PROTOCOL RESTRICTED")
